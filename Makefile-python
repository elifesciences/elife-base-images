SHELL := /bin/bash
PYTHON_VERSION=3.8
REPO_PREFIX=elifesciences/

COMMIT=develop
VENDOR=elifesciences

# this file contains all the digests for Python images. This allows somewhat reporoducible images, as the base image remains
# the same. However, we pull in the latest packages from debian repo, so there is and will be some variability depending
# on when it is built
include python_image_digests.txt
# and this is then set to the correct version when invoked with $(call)
BASE_IMAGE=$(PYTHON_IMAGE_$(PYTHON_VERSION))

REPO_SUFFIX=python
REPO=$(REPO_PREFIX)$(REPO_SUFFIX)
PYTHON_VERSION_TAG=$(REPO_PREFIX)$(REPO_SUFFIX):$(PYTHON_VERSION)-$1

docker_build_options=--label org.label-schema.schema-version=1.0 \
				--label org.label-schema.vcs-ref=$(COMMIT) \
				--label org.label-schema.build-date=$$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
				--label org.opencontainers.image.revision=$(COMMIT) \
				--label org.opencontainers.image.vendor=$(VENDOR) \
				-f Dockerfile.python \
				--build-arg BASE_IMAGE=$(BASE_IMAGE) \
				-t $(PYTHON_VERSION_TAG) \
				.

build_image = (docker build $(docker_build_options))

buildx_image = (docker buildx build --push --platform linux/amd64,linux/arm64 $(docker_build_options))

test_docker_container_name="test_python"
test_cli_runs = @[ "$$(docker run --rm $(PYTHON_VERSION_TAG) python -v ] || (echo "TEST $(PYTHON_VERSION_TAG) FAILED - cli did not run"; exit 1)

# build for current platform only.
build:
	$(call build_image)

# tests for locally stored images built
test:
	$(call test_cli_runs)
	@echo "TEST $(PYTHON_VERSION_TAG) OK"



# use buildx for multiplatform
buildx:
	$(call buildx_image)
